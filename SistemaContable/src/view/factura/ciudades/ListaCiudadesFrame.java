/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.factura.ciudades;

import view.factura.ciudades.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.TableColumn;
import model.Ciudad;
import services.CiudadService;
import view.usuario.Login;

/**
 *
 * @author gamert
 */
public class ListaCiudadesFrame extends javax.swing.JInternalFrame {
    private CiudadTableModel ciudadTableModel;
    private Connection connection;
    private CiudadService ciudadService;
    private AgregarCiudadFrame agregarCiudad;
    /**
     * Creates new form ListaCiudades
     */
    public ListaCiudadesFrame(Connection connection) {
        initComponents();
        this.connection = connection;
        ciudadService = new CiudadService(connection);
        cargarCiudades(); 
        agregarCiudad = new AgregarCiudadFrame(ciudadService);
        agregarCiudad.setListaCiudades(this);
        
        // Agregar un listener para maximizar el JInternalFrame cuando se abre
        this.addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                try {
                    setMaximum(true); // Maximiza el JInternalFrame
                } catch (java.beans.PropertyVetoException ex) {
                    Logger.getLogger(ListaCiudadesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCiudades = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ciudades");

        tblCiudades.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tblCiudades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Acción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCiudades.setRowHeight(40);
        jScrollPane1.setViewportView(tblCiudades);

        btnAgregar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        setBounds(0, 0, 821, 552);
    }// </editor-fold>//GEN-END:initComponents

    private void cargarCiudades() {
        try {
        // Verificar que el servicio no sea null
            if (ciudadService == null) {
                throw new IllegalStateException("CiudadService no ha sido inicializado.");
            }

            // Obtener la lista de ciudades desde la base de datos
            List<Ciudad> ciudades = ciudadService.obtenerTodasLasCiudades();

            // Verificar que la lista de ciudades no sea null
            if (ciudades == null) {
                throw new IllegalStateException("La lista de ciudades es null.");
            }

            // Crear el modelo de tabla y configurarlo en la tabla
            ciudadTableModel = new CiudadTableModel(ciudades);
            tblCiudades.setModel(ciudadTableModel);
            
            // Ajustar el ancho de las columnas
            TableColumn column;
            for (int i = 0; i < tblCiudades.getColumnCount(); i++) {
                column = tblCiudades.getColumnModel().getColumn(i);
                if (i == 0) { // Columna "ID"
                    column.setPreferredWidth(50);
                } else if (i == 1) { // Columna "RUC"
                    column.setPreferredWidth(100);
                } else if (i == 2) { // Columna "Nombre"
                    column.setPreferredWidth(150);
                } else if (i == 3) { // Columna "Dirección"
                    column.setPreferredWidth(200);
                } else if (i == 4) { // Columna "Acción"
                    column.setPreferredWidth(150);
                }
            }

            // Configurar la columna de "Acciones" con los botones
            TableColumn actionColumn = tblCiudades.getColumnModel().getColumn(2);
            actionColumn.setCellRenderer(new CiudadButtonColumn(tblCiudades, ciudadService, this));
            actionColumn.setCellEditor(new CiudadButtonColumn(tblCiudades, ciudadService, this));
        } catch (SQLException e) {
            Logger.getLogger(ListaCiudadesFrame.class.getName()).log(Level.SEVERE, "Error SQL al cargar ciudades", e);
        } catch (IllegalStateException e) {
            Logger.getLogger(ListaCiudadesFrame.class.getName()).log(Level.SEVERE, "Estado ilegal al cargar ciudades", e);
        } catch (Exception e) {
            Logger.getLogger(ListaCiudadesFrame.class.getName()).log(Level.SEVERE, "Error desconocido al cargar ciudades", e);
        }
    }
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        agregarCiudad.setVisible(true);
    }//GEN-LAST:event_btnAgregarActionPerformed

    public void addCiudad(Ciudad ciudad){
        // Agregar el ciudad al modelo de la tabla
        ciudadTableModel.getCiudades().add(ciudad);        
        // Notificar al modelo de la tabla que los datos han cambiado
        ciudadTableModel.fireTableDataChanged();
    }
    
    public void updateCiudad(Ciudad ciudad){
        // Agregar el ciudad al modelo de la tabla
        List<Ciudad> ciudades = ciudadTableModel.getCiudades();
        for (int i = 0; i < ciudades.size(); i++) {
            Ciudad get = ciudades.get(i);
            if(get.getCodigo()== ciudad.getCodigo()){
                ciudades.get(i).setNombre(ciudad.getNombre());
            }
        }
        
        // Notificar al modelo de la tabla que los datos han cambiado
        ciudadTableModel.fireTableDataChanged();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCiudades;
    // End of variables declaration//GEN-END:variables
}
