/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.factura;

import view.factura.*;
import dao.FacturaDAO;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.TableColumn;
import model.Factura;
import services.ArticuloService;
import services.CiudadService;
import services.ClienteService;
import services.FacturaService;
import view.usuario.Login;

/**
 *
 * @author gamert
 */
public class ListaFacturasFrame extends javax.swing.JInternalFrame {
    private FacturaTableModel facturaTableModel;
    private Connection connection;
    private FacturaService facturaService;
    private AgregarFacturaFrame agregarFactura;
    private JDesktopPane escritorio;
    /**
     * Creates new form ListaFacturas
     */
    public ListaFacturasFrame(JDesktopPane escritorio, Connection connection) {
        initComponents();
        this.escritorio = escritorio;
        this.connection = connection;        
        agregarFactura = new AgregarFacturaFrame(connection, this);
        facturaService = new FacturaService(connection);
        cargarFacturas(); 
        
        // Agregar un listener para maximizar el JInternalFrame cuando se abre
        this.addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                try {
                    setMaximum(true); // Maximiza el JInternalFrame
                } catch (java.beans.PropertyVetoException ex) {
                    Logger.getLogger(ListaFacturasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFacturas = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Facturas");

        tblFacturas.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tblFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Número", "Fecha", "Ciudad", "Cliente", "Acción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFacturas.setRowHeight(40);
        jScrollPane1.setViewportView(tblFacturas);

        btnAgregar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        setBounds(0, 0, 821, 552);
    }// </editor-fold>//GEN-END:initComponents

    private void cargarFacturas() {
        try {
        // Verificar que el servicio no sea null
            if (facturaService == null) {
                throw new IllegalStateException("FacturaService no ha sido inicializado.");
            }

            // Obtener la lista de facturas desde la base de datos
            List<Factura> facturas = facturaService.obtenerTodasLasFacturas();

            // Verificar que la lista de facturas no sea null
            if (facturas == null) {
                throw new IllegalStateException("La lista de facturas es null.");
            }

            // Crear el modelo de tabla y configurarlo en la tabla
            facturaTableModel = new FacturaTableModel(facturas);
            tblFacturas.setModel(facturaTableModel);
            
            // Ajustar el ancho de las columnas
            TableColumn column;
            for (int i = 0; i < tblFacturas.getColumnCount(); i++) {
                column = tblFacturas.getColumnModel().getColumn(i);
                if (i == 0) { // Columna "ID"
                    column.setPreferredWidth(50);
                } else if (i == 1) { // Columna "Nro"
                    column.setPreferredWidth(100);
                } else if (i == 2) { // Columna "Fecha"
                    column.setPreferredWidth(150);
                } else if (i == 3) { // Columna "Ciudad"
                    column.setPreferredWidth(150);
                } else if (i == 4) { // Columna "Cliente"
                    column.setPreferredWidth(150);
                } else if (i == 5) { // Columna "Acción"
                    column.setPreferredWidth(150);
                }
            }

            // Configurar la columna de "Acciones" con los botones
            TableColumn actionColumn = tblFacturas.getColumnModel().getColumn(5);
            actionColumn.setCellRenderer(new FacturaButtonColumn(tblFacturas, connection, this));
            actionColumn.setCellEditor(new FacturaButtonColumn(tblFacturas, connection, this));
        } catch (SQLException e) {
            Logger.getLogger(ListaFacturasFrame.class.getName()).log(Level.SEVERE, "Error SQL al cargar facturas", e);
        } catch (IllegalStateException e) {
            Logger.getLogger(ListaFacturasFrame.class.getName()).log(Level.SEVERE, "Estado ilegal al cargar facturas", e);
        } catch (Exception e) {
            Logger.getLogger(ListaFacturasFrame.class.getName()).log(Level.SEVERE, "Error desconocido al cargar facturas", e);
        }
    }
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        escritorio.add(agregarFactura);
        agregarFactura.show();
        this.hide();
    }//GEN-LAST:event_btnAgregarActionPerformed

    public void addFactura(Factura factura){
        // Agregar el factura al modelo de la tabla
        facturaTableModel.getFacturas().add(factura);        
        // Notificar al modelo de la tabla que los datos han cambiado
        facturaTableModel.fireTableDataChanged();
    }
    
    public void updateFactura(Factura factura){
        // Agregar el factura al modelo de la tabla
        List<Factura> facturas = facturaTableModel.getFacturas();
        for (int i = 0; i < facturas.size(); i++) {
            Factura get = facturas.get(i);
            if(get.getId() == factura.getId()){
                facturas.get(i).setNumero(factura.getNumero());
                facturas.get(i).setFecha(factura.getFecha());
                facturas.get(i).setCiudad(factura.getCiudad());
                facturas.get(i).setCliente(factura.getCliente());
            }
        }
        
        // Notificar al modelo de la tabla que los datos han cambiado
        facturaTableModel.fireTableDataChanged();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFacturas;
    // End of variables declaration//GEN-END:variables
}
